/**
 *
 *  Transacoes.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Transacoes.h"

#include <drogon/utils/Utilities.h>

#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::postgres;

const std::string Transacoes::Cols::_id = "id";
const std::string Transacoes::Cols::_client_id = "client_id";
const std::string Transacoes::Cols::_valor = "valor";
const std::string Transacoes::Cols::_tipo = "tipo";
const std::string Transacoes::Cols::_descricao = "descricao";
const std::string Transacoes::Cols::_realizada_em = "realizada_em";
const std::string Transacoes::Cols::_saldo_posterior = "saldo_posterior";
const std::string Transacoes::Cols::_limite_posterior = "limite_posterior";
const std::string Transacoes::primaryKeyName = "id";
const bool Transacoes::hasPrimaryKey = true;
const std::string Transacoes::tableName = "transacoes";

const std::vector<typename Transacoes::MetaData> Transacoes::metaData_ = {{"id", "int32_t", "integer", 4, 1, 1, 1},
                                                                          {"client_id", "int32_t", "integer", 4, 0, 0, 1},
                                                                          {"valor", "int32_t", "integer", 4, 0, 0, 1},
                                                                          {"tipo", "std::string", "character varying", 1, 0, 0, 1},
                                                                          {"descricao", "std::string", "character varying", 10, 0, 0, 1},
                                                                          {"realizada_em", "::trantor::Date", "timestamp with time zone", 0, 0, 0, 0},
                                                                          {"saldo_posterior", "int32_t", "integer", 4, 0, 0, 0},
                                                                          {"limite_posterior", "int32_t", "integer", 4, 0, 0, 0}};
const std::string &Transacoes::getColumnName(size_t index) noexcept(false) {
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Transacoes::Transacoes(const Row &r, const ssize_t indexOffset) noexcept {
    if (indexOffset < 0) {
        if (!r["id"].isNull()) {
            id_ = std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if (!r["client_id"].isNull()) {
            clientId_ = std::make_shared<int32_t>(r["client_id"].as<int32_t>());
        }
        if (!r["valor"].isNull()) {
            valor_ = std::make_shared<int32_t>(r["valor"].as<int32_t>());
        }
        if (!r["tipo"].isNull()) {
            tipo_ = std::make_shared<std::string>(r["tipo"].as<std::string>());
        }
        if (!r["descricao"].isNull()) {
            descricao_ = std::make_shared<std::string>(r["descricao"].as<std::string>());
        }
        if (!r["realizada_em"].isNull()) {
            auto timeStr = r["realizada_em"].as<std::string>();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p) {
                if (*p == '.') {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6) {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                realizadaEm_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
        if (!r["saldo_posterior"].isNull()) {
            saldoPosterior_ = std::make_shared<int32_t>(r["saldo_posterior"].as<int32_t>());
        }
        if (!r["limite_posterior"].isNull()) {
            limitePosterior_ = std::make_shared<int32_t>(r["limite_posterior"].as<int32_t>());
        }
    } else {
        size_t offset = (size_t)indexOffset;
        if (offset + 8 > r.size()) {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull()) {
            id_ = std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if (!r[index].isNull()) {
            clientId_ = std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if (!r[index].isNull()) {
            valor_ = std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if (!r[index].isNull()) {
            tipo_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if (!r[index].isNull()) {
            descricao_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if (!r[index].isNull()) {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p) {
                if (*p == '.') {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6) {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                realizadaEm_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
        index = offset + 6;
        if (!r[index].isNull()) {
            saldoPosterior_ = std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if (!r[index].isNull()) {
            limitePosterior_ = std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }
}

Transacoes::Transacoes(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 8) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            id_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            clientId_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull()) {
            valor_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull()) {
            tipo_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4])) {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull()) {
            descricao_ = std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5])) {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull()) {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p) {
                if (*p == '.') {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6) {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                realizadaEm_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6])) {
        dirtyFlag_[6] = true;
        if (!pJson[pMasqueradingVector[6]].isNull()) {
            saldoPosterior_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7])) {
        dirtyFlag_[7] = true;
        if (!pJson[pMasqueradingVector[7]].isNull()) {
            limitePosterior_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

Transacoes::Transacoes(const Json::Value &pJson) noexcept(false) {
    if (pJson.isMember("id")) {
        dirtyFlag_[0] = true;
        if (!pJson["id"].isNull()) {
            id_ = std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if (pJson.isMember("client_id")) {
        dirtyFlag_[1] = true;
        if (!pJson["client_id"].isNull()) {
            clientId_ = std::make_shared<int32_t>((int32_t)pJson["client_id"].asInt64());
        }
    }
    if (pJson.isMember("valor")) {
        dirtyFlag_[2] = true;
        if (!pJson["valor"].isNull()) {
            valor_ = std::make_shared<int32_t>((int32_t)pJson["valor"].asInt64());
        }
    }
    if (pJson.isMember("tipo")) {
        dirtyFlag_[3] = true;
        if (!pJson["tipo"].isNull()) {
            tipo_ = std::make_shared<std::string>(pJson["tipo"].asString());
        }
    }
    if (pJson.isMember("descricao")) {
        dirtyFlag_[4] = true;
        if (!pJson["descricao"].isNull()) {
            descricao_ = std::make_shared<std::string>(pJson["descricao"].asString());
        }
    }
    if (pJson.isMember("realizada_em")) {
        dirtyFlag_[5] = true;
        if (!pJson["realizada_em"].isNull()) {
            auto timeStr = pJson["realizada_em"].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p) {
                if (*p == '.') {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6) {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                realizadaEm_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
    if (pJson.isMember("saldo_posterior")) {
        dirtyFlag_[6] = true;
        if (!pJson["saldo_posterior"].isNull()) {
            saldoPosterior_ = std::make_shared<int32_t>((int32_t)pJson["saldo_posterior"].asInt64());
        }
    }
    if (pJson.isMember("limite_posterior")) {
        dirtyFlag_[7] = true;
        if (!pJson["limite_posterior"].isNull()) {
            limitePosterior_ = std::make_shared<int32_t>((int32_t)pJson["limite_posterior"].asInt64());
        }
    }
}

void Transacoes::updateByMasqueradedJson(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 8) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            id_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            clientId_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull()) {
            valor_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull()) {
            tipo_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4])) {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull()) {
            descricao_ = std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5])) {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull()) {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p) {
                if (*p == '.') {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6) {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                realizadaEm_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6])) {
        dirtyFlag_[6] = true;
        if (!pJson[pMasqueradingVector[6]].isNull()) {
            saldoPosterior_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7])) {
        dirtyFlag_[7] = true;
        if (!pJson[pMasqueradingVector[7]].isNull()) {
            limitePosterior_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

void Transacoes::updateByJson(const Json::Value &pJson) noexcept(false) {
    if (pJson.isMember("id")) {
        if (!pJson["id"].isNull()) {
            id_ = std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if (pJson.isMember("client_id")) {
        dirtyFlag_[1] = true;
        if (!pJson["client_id"].isNull()) {
            clientId_ = std::make_shared<int32_t>((int32_t)pJson["client_id"].asInt64());
        }
    }
    if (pJson.isMember("valor")) {
        dirtyFlag_[2] = true;
        if (!pJson["valor"].isNull()) {
            valor_ = std::make_shared<int32_t>((int32_t)pJson["valor"].asInt64());
        }
    }
    if (pJson.isMember("tipo")) {
        dirtyFlag_[3] = true;
        if (!pJson["tipo"].isNull()) {
            tipo_ = std::make_shared<std::string>(pJson["tipo"].asString());
        }
    }
    if (pJson.isMember("descricao")) {
        dirtyFlag_[4] = true;
        if (!pJson["descricao"].isNull()) {
            descricao_ = std::make_shared<std::string>(pJson["descricao"].asString());
        }
    }
    if (pJson.isMember("realizada_em")) {
        dirtyFlag_[5] = true;
        if (!pJson["realizada_em"].isNull()) {
            auto timeStr = pJson["realizada_em"].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p) {
                if (*p == '.') {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6) {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                realizadaEm_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
    if (pJson.isMember("saldo_posterior")) {
        dirtyFlag_[6] = true;
        if (!pJson["saldo_posterior"].isNull()) {
            saldoPosterior_ = std::make_shared<int32_t>((int32_t)pJson["saldo_posterior"].asInt64());
        }
    }
    if (pJson.isMember("limite_posterior")) {
        dirtyFlag_[7] = true;
        if (!pJson["limite_posterior"].isNull()) {
            limitePosterior_ = std::make_shared<int32_t>((int32_t)pJson["limite_posterior"].asInt64());
        }
    }
}

const int32_t &Transacoes::getValueOfId() const noexcept {
    const static int32_t defaultValue = int32_t();
    if (id_) return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Transacoes::getId() const noexcept { return id_; }
void Transacoes::setId(const int32_t &pId) noexcept {
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Transacoes::PrimaryKeyType &Transacoes::getPrimaryKey() const {
    assert(id_);
    return *id_;
}

const int32_t &Transacoes::getValueOfClientId() const noexcept {
    const static int32_t defaultValue = int32_t();
    if (clientId_) return *clientId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Transacoes::getClientId() const noexcept { return clientId_; }
void Transacoes::setClientId(const int32_t &pClientId) noexcept {
    clientId_ = std::make_shared<int32_t>(pClientId);
    dirtyFlag_[1] = true;
}

const int32_t &Transacoes::getValueOfValor() const noexcept {
    const static int32_t defaultValue = int32_t();
    if (valor_) return *valor_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Transacoes::getValor() const noexcept { return valor_; }
void Transacoes::setValor(const int32_t &pValor) noexcept {
    valor_ = std::make_shared<int32_t>(pValor);
    dirtyFlag_[2] = true;
}

const std::string &Transacoes::getValueOfTipo() const noexcept {
    const static std::string defaultValue = std::string();
    if (tipo_) return *tipo_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Transacoes::getTipo() const noexcept { return tipo_; }
void Transacoes::setTipo(const std::string &pTipo) noexcept {
    tipo_ = std::make_shared<std::string>(pTipo);
    dirtyFlag_[3] = true;
}
void Transacoes::setTipo(std::string &&pTipo) noexcept {
    tipo_ = std::make_shared<std::string>(std::move(pTipo));
    dirtyFlag_[3] = true;
}

const std::string &Transacoes::getValueOfDescricao() const noexcept {
    const static std::string defaultValue = std::string();
    if (descricao_) return *descricao_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Transacoes::getDescricao() const noexcept { return descricao_; }
void Transacoes::setDescricao(const std::string &pDescricao) noexcept {
    descricao_ = std::make_shared<std::string>(pDescricao);
    dirtyFlag_[4] = true;
}
void Transacoes::setDescricao(std::string &&pDescricao) noexcept {
    descricao_ = std::make_shared<std::string>(std::move(pDescricao));
    dirtyFlag_[4] = true;
}

const ::trantor::Date &Transacoes::getValueOfRealizadaEm() const noexcept {
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if (realizadaEm_) return *realizadaEm_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Transacoes::getRealizadaEm() const noexcept { return realizadaEm_; }
void Transacoes::setRealizadaEm(const ::trantor::Date &pRealizadaEm) noexcept {
    realizadaEm_ = std::make_shared<::trantor::Date>(pRealizadaEm);
    dirtyFlag_[5] = true;
}
void Transacoes::setRealizadaEmToNull() noexcept {
    realizadaEm_.reset();
    dirtyFlag_[5] = true;
}

const int32_t &Transacoes::getValueOfSaldoPosterior() const noexcept {
    const static int32_t defaultValue = int32_t();
    if (saldoPosterior_) return *saldoPosterior_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Transacoes::getSaldoPosterior() const noexcept { return saldoPosterior_; }
void Transacoes::setSaldoPosterior(const int32_t &pSaldoPosterior) noexcept {
    saldoPosterior_ = std::make_shared<int32_t>(pSaldoPosterior);
    dirtyFlag_[6] = true;
}
void Transacoes::setSaldoPosteriorToNull() noexcept {
    saldoPosterior_.reset();
    dirtyFlag_[6] = true;
}

const int32_t &Transacoes::getValueOfLimitePosterior() const noexcept {
    const static int32_t defaultValue = int32_t();
    if (limitePosterior_) return *limitePosterior_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Transacoes::getLimitePosterior() const noexcept { return limitePosterior_; }
void Transacoes::setLimitePosterior(const int32_t &pLimitePosterior) noexcept {
    limitePosterior_ = std::make_shared<int32_t>(pLimitePosterior);
    dirtyFlag_[7] = true;
}
void Transacoes::setLimitePosteriorToNull() noexcept {
    limitePosterior_.reset();
    dirtyFlag_[7] = true;
}

void Transacoes::updateId(const uint64_t id) {}

const std::vector<std::string> &Transacoes::insertColumns() noexcept {
    static const std::vector<std::string> inCols = {"client_id", "valor", "tipo", "descricao", "realizada_em", "saldo_posterior", "limite_posterior"};
    return inCols;
}

void Transacoes::outputArgs(drogon::orm::internal::SqlBinder &binder) const {
    if (dirtyFlag_[1]) {
        if (getClientId()) {
            binder << getValueOfClientId();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2]) {
        if (getValor()) {
            binder << getValueOfValor();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3]) {
        if (getTipo()) {
            binder << getValueOfTipo();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4]) {
        if (getDescricao()) {
            binder << getValueOfDescricao();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5]) {
        if (getRealizadaEm()) {
            binder << getValueOfRealizadaEm();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[6]) {
        if (getSaldoPosterior()) {
            binder << getValueOfSaldoPosterior();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[7]) {
        if (getLimitePosterior()) {
            binder << getValueOfLimitePosterior();
        } else {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Transacoes::updateColumns() const {
    std::vector<std::string> ret;
    if (dirtyFlag_[1]) {
        ret.push_back(getColumnName(1));
    }
    if (dirtyFlag_[2]) {
        ret.push_back(getColumnName(2));
    }
    if (dirtyFlag_[3]) {
        ret.push_back(getColumnName(3));
    }
    if (dirtyFlag_[4]) {
        ret.push_back(getColumnName(4));
    }
    if (dirtyFlag_[5]) {
        ret.push_back(getColumnName(5));
    }
    if (dirtyFlag_[6]) {
        ret.push_back(getColumnName(6));
    }
    if (dirtyFlag_[7]) {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void Transacoes::updateArgs(drogon::orm::internal::SqlBinder &binder) const {
    if (dirtyFlag_[1]) {
        if (getClientId()) {
            binder << getValueOfClientId();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2]) {
        if (getValor()) {
            binder << getValueOfValor();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3]) {
        if (getTipo()) {
            binder << getValueOfTipo();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4]) {
        if (getDescricao()) {
            binder << getValueOfDescricao();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5]) {
        if (getRealizadaEm()) {
            binder << getValueOfRealizadaEm();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[6]) {
        if (getSaldoPosterior()) {
            binder << getValueOfSaldoPosterior();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[7]) {
        if (getLimitePosterior()) {
            binder << getValueOfLimitePosterior();
        } else {
            binder << nullptr;
        }
    }
}
Json::Value Transacoes::toJson() const {
    Json::Value ret;
    if (getId()) {
        ret["id"] = getValueOfId();
    } else {
        ret["id"] = Json::Value();
    }
    if (getClientId()) {
        ret["client_id"] = getValueOfClientId();
    } else {
        ret["client_id"] = Json::Value();
    }
    if (getValor()) {
        ret["valor"] = getValueOfValor();
    } else {
        ret["valor"] = Json::Value();
    }
    if (getTipo()) {
        ret["tipo"] = getValueOfTipo();
    } else {
        ret["tipo"] = Json::Value();
    }
    if (getDescricao()) {
        ret["descricao"] = getValueOfDescricao();
    } else {
        ret["descricao"] = Json::Value();
    }
    if (getRealizadaEm()) {
        ret["realizada_em"] = getRealizadaEm()->toDbStringLocal();
    } else {
        ret["realizada_em"] = Json::Value();
    }
    if (getSaldoPosterior()) {
        ret["saldo_posterior"] = getValueOfSaldoPosterior();
    } else {
        ret["saldo_posterior"] = Json::Value();
    }
    if (getLimitePosterior()) {
        ret["limite_posterior"] = getValueOfLimitePosterior();
    } else {
        ret["limite_posterior"] = Json::Value();
    }
    return ret;
}

Json::Value Transacoes::toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const {
    Json::Value ret;
    if (pMasqueradingVector.size() == 8) {
        if (!pMasqueradingVector[0].empty()) {
            if (getId()) {
                ret[pMasqueradingVector[0]] = getValueOfId();
            } else {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (getClientId()) {
                ret[pMasqueradingVector[1]] = getValueOfClientId();
            } else {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[2].empty()) {
            if (getValor()) {
                ret[pMasqueradingVector[2]] = getValueOfValor();
            } else {
                ret[pMasqueradingVector[2]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[3].empty()) {
            if (getTipo()) {
                ret[pMasqueradingVector[3]] = getValueOfTipo();
            } else {
                ret[pMasqueradingVector[3]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[4].empty()) {
            if (getDescricao()) {
                ret[pMasqueradingVector[4]] = getValueOfDescricao();
            } else {
                ret[pMasqueradingVector[4]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[5].empty()) {
            if (getRealizadaEm()) {
                ret[pMasqueradingVector[5]] = getRealizadaEm()->toDbStringLocal();
            } else {
                ret[pMasqueradingVector[5]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[6].empty()) {
            if (getSaldoPosterior()) {
                ret[pMasqueradingVector[6]] = getValueOfSaldoPosterior();
            } else {
                ret[pMasqueradingVector[6]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[7].empty()) {
            if (getLimitePosterior()) {
                ret[pMasqueradingVector[7]] = getValueOfLimitePosterior();
            } else {
                ret[pMasqueradingVector[7]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getId()) {
        ret["id"] = getValueOfId();
    } else {
        ret["id"] = Json::Value();
    }
    if (getClientId()) {
        ret["client_id"] = getValueOfClientId();
    } else {
        ret["client_id"] = Json::Value();
    }
    if (getValor()) {
        ret["valor"] = getValueOfValor();
    } else {
        ret["valor"] = Json::Value();
    }
    if (getTipo()) {
        ret["tipo"] = getValueOfTipo();
    } else {
        ret["tipo"] = Json::Value();
    }
    if (getDescricao()) {
        ret["descricao"] = getValueOfDescricao();
    } else {
        ret["descricao"] = Json::Value();
    }
    if (getRealizadaEm()) {
        ret["realizada_em"] = getRealizadaEm()->toDbStringLocal();
    } else {
        ret["realizada_em"] = Json::Value();
    }
    if (getSaldoPosterior()) {
        ret["saldo_posterior"] = getValueOfSaldoPosterior();
    } else {
        ret["saldo_posterior"] = Json::Value();
    }
    if (getLimitePosterior()) {
        ret["limite_posterior"] = getValueOfLimitePosterior();
    } else {
        ret["limite_posterior"] = Json::Value();
    }
    return ret;
}

bool Transacoes::validateJsonForCreation(const Json::Value &pJson, std::string &err) {
    if (pJson.isMember("id")) {
        if (!validJsonOfField(0, "id", pJson["id"], err, true)) return false;
    }
    if (pJson.isMember("client_id")) {
        if (!validJsonOfField(1, "client_id", pJson["client_id"], err, true)) return false;
    } else {
        err = "The client_id column cannot be null";
        return false;
    }
    if (pJson.isMember("valor")) {
        if (!validJsonOfField(2, "valor", pJson["valor"], err, true)) return false;
    } else {
        err = "The valor column cannot be null";
        return false;
    }
    if (pJson.isMember("tipo")) {
        if (!validJsonOfField(3, "tipo", pJson["tipo"], err, true)) return false;
    } else {
        err = "The tipo column cannot be null";
        return false;
    }
    if (pJson.isMember("descricao")) {
        if (!validJsonOfField(4, "descricao", pJson["descricao"], err, true)) return false;
    } else {
        err = "The descricao column cannot be null";
        return false;
    }
    if (pJson.isMember("realizada_em")) {
        if (!validJsonOfField(5, "realizada_em", pJson["realizada_em"], err, true)) return false;
    }
    if (pJson.isMember("saldo_posterior")) {
        if (!validJsonOfField(6, "saldo_posterior", pJson["saldo_posterior"], err, true)) return false;
    }
    if (pJson.isMember("limite_posterior")) {
        if (!validJsonOfField(7, "limite_posterior", pJson["limite_posterior"], err, true)) return false;
    }
    return true;
}
bool Transacoes::validateMasqueradedJsonForCreation(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector, std::string &err) {
    if (pMasqueradingVector.size() != 8) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if (!pMasqueradingVector[0].empty()) {
            if (pJson.isMember(pMasqueradingVector[0])) {
                if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true)) return false;
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (pJson.isMember(pMasqueradingVector[1])) {
                if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true)) return false;
            } else {
                err = "The " + pMasqueradingVector[1] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[2].empty()) {
            if (pJson.isMember(pMasqueradingVector[2])) {
                if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true)) return false;
            } else {
                err = "The " + pMasqueradingVector[2] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[3].empty()) {
            if (pJson.isMember(pMasqueradingVector[3])) {
                if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true)) return false;
            } else {
                err = "The " + pMasqueradingVector[3] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[4].empty()) {
            if (pJson.isMember(pMasqueradingVector[4])) {
                if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true)) return false;
            } else {
                err = "The " + pMasqueradingVector[4] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[5].empty()) {
            if (pJson.isMember(pMasqueradingVector[5])) {
                if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true)) return false;
            }
        }
        if (!pMasqueradingVector[6].empty()) {
            if (pJson.isMember(pMasqueradingVector[6])) {
                if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true)) return false;
            }
        }
        if (!pMasqueradingVector[7].empty()) {
            if (pJson.isMember(pMasqueradingVector[7])) {
                if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true)) return false;
            }
        }
    } catch (const Json::LogicError &e) {
        err = e.what();
        return false;
    }
    return true;
}
bool Transacoes::validateJsonForUpdate(const Json::Value &pJson, std::string &err) {
    if (pJson.isMember("id")) {
        if (!validJsonOfField(0, "id", pJson["id"], err, false)) return false;
    } else {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (pJson.isMember("client_id")) {
        if (!validJsonOfField(1, "client_id", pJson["client_id"], err, false)) return false;
    }
    if (pJson.isMember("valor")) {
        if (!validJsonOfField(2, "valor", pJson["valor"], err, false)) return false;
    }
    if (pJson.isMember("tipo")) {
        if (!validJsonOfField(3, "tipo", pJson["tipo"], err, false)) return false;
    }
    if (pJson.isMember("descricao")) {
        if (!validJsonOfField(4, "descricao", pJson["descricao"], err, false)) return false;
    }
    if (pJson.isMember("realizada_em")) {
        if (!validJsonOfField(5, "realizada_em", pJson["realizada_em"], err, false)) return false;
    }
    if (pJson.isMember("saldo_posterior")) {
        if (!validJsonOfField(6, "saldo_posterior", pJson["saldo_posterior"], err, false)) return false;
    }
    if (pJson.isMember("limite_posterior")) {
        if (!validJsonOfField(7, "limite_posterior", pJson["limite_posterior"], err, false)) return false;
    }
    return true;
}
bool Transacoes::validateMasqueradedJsonForUpdate(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector, std::string &err) {
    if (pMasqueradingVector.size() != 8) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
            if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false)) return false;
        } else {
            err = "The value of primary key must be set in the json object for update";
            return false;
        }
        if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
            if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false)) return false;
        }
        if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
            if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false)) return false;
        }
        if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
            if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false)) return false;
        }
        if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4])) {
            if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false)) return false;
        }
        if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5])) {
            if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false)) return false;
        }
        if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6])) {
            if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false)) return false;
        }
        if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7])) {
            if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false)) return false;
        }
    } catch (const Json::LogicError &e) {
        err = e.what();
        return false;
    }
    return true;
}
bool Transacoes::validJsonOfField(size_t index, const std::string &fieldName, const Json::Value &pJson, std::string &err, bool isForCreation) {
    switch (index) {
        case 0:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (isForCreation) {
                err = "The automatic primary key cannot be set";
                return false;
            }
            if (!pJson.isInt()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 1:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isInt()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 2:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isInt()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 3:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if (pJson.isString() && pJson.asString().length() > 1) {
                err = "String length exceeds limit for the " + fieldName + " field (the maximum value is 1)";
                return false;
            }

            break;
        case 4:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if (pJson.isString() && pJson.asString().length() > 10) {
                err = "String length exceeds limit for the " + fieldName + " field (the maximum value is 10)";
                return false;
            }

            break;
        case 5:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 6:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isInt()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 7:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isInt()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        default:
            err = "Internal error in the server";
            return false;
    }
    return true;
}
